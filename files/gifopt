#!/usr/bin/env bash
#
# /usr/local/xbin/gifopt
#
#
# Description:
#   A script to automate 'gifsicle' to optimize GIF images.
#
# Usage:
#   gifopt [-v] [-c <int>] <file(s)>        1 or more files
#   gifopt -h                               Show help
#

ERR=0;
V=0;
vb='';
C=''

# Help
[[ ${#} < 1 || ${1} == '-h' ]] && sed -n '9,11p' ${0} && exit 1;


# Verbose
[[ ${1} == '-v' ]] && V=1 && shift 1;


# Colors ?
[[ ${1} == '-c' ]] && C="--colors ${2} " && shift 2;


# Check dependencies
for dep in gifsicle; do
    [[ ! $(type ${dep} 2>/dev/null) ]] && echo -e ":: You must install '${dep}' to continue." && ERR=1;
done
[[ ${ERR} == 1 ]] && echo -e "\nAborting..." && exit ${ERR};


# Pick or delete
function isOptimized()
{
    local img1="${1}";
    local img2="${2}";

    size1=$(wc -c "${img1}" 2> /dev/null | awk '{print $1}');
    size2=$(wc -c "${img2}" 2> /dev/null | awk '{print $1}');

    if [ ${size2} -lt ${size1} ]; then
        procentage=$(echo "scale=2; (${size2} * 100 / ${size1}) - 100" | bc);
        echo -e ":: Optimized! (${procentage//-/}%)\n";
        [[ ${V} != 0 ]] && echo -en "Renaming: " && vb='-v ';
        mv ${vb}"${img2}" "${img2%.*}";
    else
        echo -e ":: Keeping the original...\n";
        [[ ${V} != 0 ]] && echo -n "Deleting: " && vb='-v ';
        rm ${vb}"${img2}";
    fi
}


# Loop $@
for file in "$@"; do
    [[ -f "${file}" && "${file##*.}" != 'gif' ]] && \
        echo -e "»» $(basename "${file}")\n:: Not a GIF image. Skipping...\n";

    if [[ -f "${file}" ]]; then
        echo "»» $(basename "${file}")";
        gifsicle ${C}-O3 "${file}" -o "${file}.opt";
        isOptimized "${file}"{,.opt};
    else
        echo "$(basename $0): '${file}' doesn't exist";
        ERR=1;
    fi
done

exit ${ERR};
